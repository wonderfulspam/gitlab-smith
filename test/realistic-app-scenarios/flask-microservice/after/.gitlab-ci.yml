# AFTER: Optimized Flask Microservice CI Pipeline
# Consolidated using templates, matrix strategies, and proper include structure

include:
  - local: 'ci/templates.yml'
  - local: 'ci/lint-security.yml' 
  - local: 'ci/testing.yml'
  - local: 'ci/build-deploy.yml'

stages:
  - lint
  - test
  - security
  - build
  - deploy

variables:
  DOCKER_REGISTRY: "registry.company.com"
  PYTHON_VERSION: "3.11"
  POSTGRES_VERSION: "14"
  REDIS_VERSION: "7"

# Consolidated linting using matrix
lint:
  extends: .python_dev_template
  stage: lint
  parallel:
    matrix:
      - LINT_TOOL: black
        LINT_COMMAND: "black --check --diff app/"
      - LINT_TOOL: isort
        LINT_COMMAND: "isort --check-only --diff app/"
      - LINT_TOOL: flake8
        LINT_COMMAND: "flake8 app/ tests/"
      - LINT_TOOL: mypy
        LINT_COMMAND: "mypy app/"
  script:
    - echo "Running $LINT_TOOL..."
    - $LINT_COMMAND
    - echo "$LINT_TOOL check completed"

# Test jobs using consolidated templates
test:unit:
  extends: .python_test_template
  script:
    - python -m pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html
    - echo "Unit tests completed"
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/

test:integration:
  extends: .python_integration_template
  script:
    - python -m pytest tests/integration/ -v
    - echo "Integration tests completed"
  artifacts:
    when: always
    reports:
      junit: junit.xml

test:e2e:
  extends: .python_e2e_template
  script:
    - python -m pytest tests/e2e/ -v
    - echo "End-to-end tests completed"
  artifacts:
    when: always
    paths:
      - screenshots/

# Consolidated security scanning
security:
  extends: .python_security_template
  parallel:
    matrix:
      - SECURITY_TOOL: bandit
        SECURITY_COMMAND: "bandit -r app/ -f json -o bandit-report.json && bandit -r app/"
        REPORT_FILE: "bandit-report.json"
        REPORT_TYPE: "sast"
      - SECURITY_TOOL: safety
        SECURITY_COMMAND: "safety check --json --output safety-report.json && safety check"
        REPORT_FILE: "safety-report.json"
        REPORT_TYPE: "dependency_scanning"
      - SECURITY_TOOL: pip-audit
        SECURITY_COMMAND: "pip-audit --format=json --output=pip-audit-report.json && pip-audit"
        REPORT_FILE: "pip-audit-report.json"
        REPORT_TYPE: "dependency_scanning"
  script:
    - echo "Running $SECURITY_TOOL..."
    - $SECURITY_COMMAND
    - echo "$SECURITY_TOOL scan completed"
  artifacts:
    reports:
      $REPORT_TYPE: $REPORT_FILE
    when: always

# Build jobs using matrix
build:
  extends: .docker_build_template
  parallel:
    matrix:
      - BUILD_TYPE: app
        DOCKERFILE: "Dockerfile"
        IMAGE_SUFFIX: ""
      - BUILD_TYPE: migrations
        DOCKERFILE: "Dockerfile.migrations"
        IMAGE_SUFFIX: "-migrations"
  script:
    - docker build -f $DOCKERFILE -t $DOCKER_REGISTRY/flask-microservice$IMAGE_SUFFIX:$CI_COMMIT_SHA .
    - docker build -f $DOCKERFILE -t $DOCKER_REGISTRY/flask-microservice$IMAGE_SUFFIX:latest .
    - docker push $DOCKER_REGISTRY/flask-microservice$IMAGE_SUFFIX:$CI_COMMIT_SHA
    - docker push $DOCKER_REGISTRY/flask-microservice$IMAGE_SUFFIX:latest
    - echo "$BUILD_TYPE Docker build completed"
  dependencies:
    - test:unit
    - test:integration

# Deployment using matrix
deploy:
  extends: .kubernetes_deploy_template
  parallel:
    matrix:
      - ENVIRONMENT: staging
        NAMESPACE: "microservices-staging"
        REPLICAS: 2
        CPU_LIMIT: "500m"
        MEMORY_LIMIT: "512Mi"
        CPU_REQUEST: "250m"
        MEMORY_REQUEST: "256Mi"
        URL: "https://api-staging.company.com"
        BRANCH_RULE: '$CI_COMMIT_BRANCH == "main"'
      - ENVIRONMENT: production
        NAMESPACE: "microservices-prod"
        REPLICAS: 5
        CPU_LIMIT: "1000m"
        MEMORY_LIMIT: "1024Mi"
        CPU_REQUEST: "500m"
        MEMORY_REQUEST: "512Mi"
        URL: "https://api.company.com"
        BRANCH_RULE: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
        MANUAL: true
  dependencies:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && $ENVIRONMENT == "staging"'
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/ && $ENVIRONMENT == "production"'
      when: manual