# Environment-specific templates and configurations
.deployment_template:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT .
    - docker push $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT
    - kubectl config use-context $ENVIRONMENT
    - kubectl set image deployment/app app=$DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT -n $NAMESPACE
    - kubectl scale deployment/app --replicas=$REPLICA_COUNT -n $NAMESPACE
    - kubectl rollout status deployment/app -n $NAMESPACE
  environment:
    name: ${ENVIRONMENT}
    url: ${URL}

# Environment-specific variable definitions can be centralized here
.dev_variables: &dev_vars
  NODE_ENV: "development"
  API_URL: "https://api-dev.company.com"
  DATABASE_URL: "postgresql://dev_user:dev_pass@dev-db:5432/devdb"

.staging_variables: &staging_vars
  NODE_ENV: "staging"
  API_URL: "https://api-staging.company.com"
  DATABASE_URL: "postgresql://staging_user:staging_pass@staging-db:5432/stagingdb"

.production_variables: &prod_vars
  NODE_ENV: "production"
  API_URL: "https://api.company.com"
  DATABASE_URL: "postgresql://prod_user:prod_pass@prod-db:5432/proddb"