# BEFORE: Scenario 7 - Multi-Environment Matrix with Repetitive Configuration
# This shows verbose environment matrix that can be consolidated with parallel:matrix

stages:
  - build
  - test
  - deploy

variables:
  DOCKER_REGISTRY: "registry.company.com"

# Repetitive build jobs for different environments
build:dev:
  stage: build
  image: node:16
  variables:
    NODE_ENV: "development"
    API_URL: "https://api-dev.company.com"
    DATABASE_URL: "postgresql://dev_user:dev_pass@dev-db:5432/devdb"
  script:
    - npm ci
    - npm run build
    - npm run test
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

build:staging:
  stage: build
  image: node:16
  variables:
    NODE_ENV: "staging"
    API_URL: "https://api-staging.company.com"
    DATABASE_URL: "postgresql://staging_user:staging_pass@staging-db:5432/stagingdb"
  script:
    - npm ci
    - npm run build
    - npm run test
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'

build:prod:
  stage: build
  image: node:16
  variables:
    NODE_ENV: "production"
    API_URL: "https://api.company.com"
    DATABASE_URL: "postgresql://prod_user:prod_pass@prod-db:5432/proddb"
  script:
    - npm ci
    - npm run build
    - npm run test
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

# Repetitive test jobs for different Node versions
test:node14:dev:
  stage: test
  image: node:14
  variables:
    NODE_ENV: "development"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

test:node16:dev:
  stage: test
  image: node:16
  variables:
    NODE_ENV: "development"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

test:node18:dev:
  stage: test
  image: node:18
  variables:
    NODE_ENV: "development"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

test:node14:staging:
  stage: test
  image: node:14
  variables:
    NODE_ENV: "staging"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

test:node16:staging:
  stage: test
  image: node:16
  variables:
    NODE_ENV: "staging"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

test:node18:staging:
  stage: test
  image: node:18
  variables:
    NODE_ENV: "staging"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

test:node16:prod:
  stage: test
  image: node:16
  variables:
    NODE_ENV: "production"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

test:node18:prod:
  stage: test
  image: node:18
  variables:
    NODE_ENV: "production"
  script:
    - npm ci
    - npm run test:unit
    - npm run test:integration
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'

# Repetitive deployment jobs
deploy:dev:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    ENVIRONMENT: "dev"
    NAMESPACE: "development"
    REPLICA_COUNT: "1"
    RESOURCE_LIMIT_CPU: "500m"
    RESOURCE_LIMIT_MEMORY: "512Mi"
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT .
    - docker push $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT
    - kubectl config use-context $ENVIRONMENT
    - kubectl set image deployment/app app=$DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT -n $NAMESPACE
    - kubectl scale deployment/app --replicas=$REPLICA_COUNT -n $NAMESPACE
    - kubectl rollout status deployment/app -n $NAMESPACE
  environment:
    name: development
    url: https://dev.company.com
  dependencies:
    - build:dev
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop"'

deploy:staging:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    ENVIRONMENT: "staging"
    NAMESPACE: "staging"
    REPLICA_COUNT: "2"
    RESOURCE_LIMIT_CPU: "1000m"
    RESOURCE_LIMIT_MEMORY: "1024Mi"
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT .
    - docker push $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT
    - kubectl config use-context $ENVIRONMENT
    - kubectl set image deployment/app app=$DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT -n $NAMESPACE
    - kubectl scale deployment/app --replicas=$REPLICA_COUNT -n $NAMESPACE
    - kubectl rollout status deployment/app -n $NAMESPACE
  environment:
    name: staging
    url: https://staging.company.com
  dependencies:
    - build:staging
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy:prod:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    ENVIRONMENT: "prod"
    NAMESPACE: "production"
    REPLICA_COUNT: "5"
    RESOURCE_LIMIT_CPU: "2000m"
    RESOURCE_LIMIT_MEMORY: "2048Mi"
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $DOCKER_REGISTRY
  script:
    - docker build -t $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT .
    - docker push $DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT
    - kubectl config use-context $ENVIRONMENT
    - kubectl set image deployment/app app=$DOCKER_REGISTRY/app:$CI_COMMIT_SHA-$ENVIRONMENT -n $NAMESPACE
    - kubectl scale deployment/app --replicas=$REPLICA_COUNT -n $NAMESPACE
    - kubectl rollout status deployment/app -n $NAMESPACE
  environment:
    name: production
    url: https://company.com
  dependencies:
    - build:prod
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: manual