# BEFORE: Scenario 6 - Monolithic Include Breakdown for Microservices
# This scenario shows a large monolithic CI file that should be broken down
# into service-specific includes with proper dependency management

stages:
  - build
  - test
  - security
  - package
  - deploy

variables:
  DOCKER_REGISTRY: "registry.company.com"
  KUBERNETES_NAMESPACE: "production"
  NODE_VERSION: "18"
  PYTHON_VERSION: "3.11"
  GO_VERSION: "1.20"

# Common setup that will be extracted to templates
.node_setup: &node_setup
  image: node:18
  before_script:
    - npm ci --cache .npm --prefer-offline
  cache:
    key: "$CI_COMMIT_REF_SLUG-npm"
    paths:
      - node_modules/
      - .npm/

.python_setup: &python_setup
  image: python:3.11
  before_script:
    - pip install --cache-dir .pip -r requirements.txt
  cache:
    key: "$CI_COMMIT_REF_SLUG-pip"
    paths:
      - .pip/
      - .venv/

.go_setup: &go_setup
  image: golang:1.20
  before_script:
    - go mod download
  cache:
    key: "$CI_COMMIT_REF_SLUG-go"
    paths:
      - /go/pkg/mod/

.docker_setup: &docker_setup
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $DOCKER_REGISTRY

# Frontend Service (React)
build:frontend:
  <<: *node_setup
  stage: build
  script:
    - cd frontend/
    - npm run build
    - npm run test:unit
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 hour
  rules:
    - changes:
        - frontend/**/*
        - package.json
        - package-lock.json

test:frontend:e2e:
  <<: *node_setup
  stage: test
  services:
    - selenium/standalone-chrome:latest
  script:
    - cd frontend/
    - npm run test:e2e
  artifacts:
    when: always
    reports:
      junit: frontend/test-results.xml
    paths:
      - frontend/screenshots/
  rules:
    - changes:
        - frontend/**/*
  dependencies:
    - build:frontend

security:frontend:
  <<: *node_setup
  stage: security
  script:
    - cd frontend/
    - npm audit --audit-level high
    - npm run lint:security
  rules:
    - changes:
        - frontend/**/*

package:frontend:
  <<: *docker_setup
  stage: package
  script:
    - docker build -f frontend/Dockerfile -t $DOCKER_REGISTRY/frontend:$CI_COMMIT_SHA frontend/
    - docker push $DOCKER_REGISTRY/frontend:$CI_COMMIT_SHA
  dependencies:
    - build:frontend
  rules:
    - changes:
        - frontend/**/*

# API Service (Python/FastAPI)
build:api:
  <<: *python_setup
  stage: build
  script:
    - cd api/
    - python -m pytest tests/unit/ --cov=app --cov-report=xml
    - python -m pylint app/
    - python -m mypy app/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: api/coverage.xml
  rules:
    - changes:
        - api/**/*
        - requirements.txt

test:api:integration:
  <<: *python_setup
  stage: test
  services:
    - postgres:13
    - redis:6
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/testdb"
    REDIS_URL: "redis://redis:6379"
  script:
    - cd api/
    - python -m pytest tests/integration/ -v
  rules:
    - changes:
        - api/**/*
  dependencies:
    - build:api

security:api:
  <<: *python_setup
  stage: security
  script:
    - cd api/
    - python -m bandit -r app/
    - python -m safety check
    - python -m pip-audit
  rules:
    - changes:
        - api/**/*

package:api:
  <<: *docker_setup
  stage: package
  script:
    - docker build -f api/Dockerfile -t $DOCKER_REGISTRY/api:$CI_COMMIT_SHA api/
    - docker push $DOCKER_REGISTRY/api:$CI_COMMIT_SHA
  dependencies:
    - build:api
  rules:
    - changes:
        - api/**/*

# Worker Service (Python/Celery)
build:worker:
  <<: *python_setup
  stage: build
  script:
    - cd worker/
    - python -m pytest tests/ --cov=worker --cov-report=xml
    - python -m pylint worker/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: worker/coverage.xml
  rules:
    - changes:
        - worker/**/*
        - worker-requirements.txt

test:worker:integration:
  <<: *python_setup
  stage: test
  services:
    - redis:6
    - rabbitmq:3-management
  variables:
    REDIS_URL: "redis://redis:6379"
    CELERY_BROKER_URL: "amqp://guest:guest@rabbitmq:5672/"
  script:
    - cd worker/
    - python -m pytest tests/integration/ -v
  rules:
    - changes:
        - worker/**/*
  dependencies:
    - build:worker

package:worker:
  <<: *docker_setup
  stage: package
  script:
    - docker build -f worker/Dockerfile -t $DOCKER_REGISTRY/worker:$CI_COMMIT_SHA worker/
    - docker push $DOCKER_REGISTRY/worker:$CI_COMMIT_SHA
  dependencies:
    - build:worker
  rules:
    - changes:
        - worker/**/*

# Gateway Service (Go)
build:gateway:
  <<: *go_setup
  stage: build
  script:
    - cd gateway/
    - go test ./... -cover -coverprofile=coverage.out
    - go vet ./...
    - golangci-lint run
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: gateway/coverage.out
  rules:
    - changes:
        - gateway/**/*
        - go.mod
        - go.sum

test:gateway:integration:
  <<: *go_setup
  stage: test
  services:
    - postgres:13
  variables:
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/testdb"
  script:
    - cd gateway/
    - go test ./tests/integration -v
  rules:
    - changes:
        - gateway/**/*
  dependencies:
    - build:gateway

security:gateway:
  <<: *go_setup
  stage: security
  script:
    - cd gateway/
    - gosec ./...
    - go list -json -m all | nancy sleuth
  rules:
    - changes:
        - gateway/**/*

package:gateway:
  <<: *docker_setup
  stage: package
  script:
    - docker build -f gateway/Dockerfile -t $DOCKER_REGISTRY/gateway:$CI_COMMIT_SHA gateway/
    - docker push $DOCKER_REGISTRY/gateway:$CI_COMMIT_SHA
  dependencies:
    - build:gateway
  rules:
    - changes:
        - gateway/**/*

# Deployment jobs
deploy:staging:
  image: bitnami/kubectl:latest
  stage: deploy
  script:
    - kubectl set image deployment/frontend frontend=$DOCKER_REGISTRY/frontend:$CI_COMMIT_SHA -n staging
    - kubectl set image deployment/api api=$DOCKER_REGISTRY/api:$CI_COMMIT_SHA -n staging
    - kubectl set image deployment/worker worker=$DOCKER_REGISTRY/worker:$CI_COMMIT_SHA -n staging
    - kubectl set image deployment/gateway gateway=$DOCKER_REGISTRY/gateway:$CI_COMMIT_SHA -n staging
    - kubectl rollout status deployment/frontend -n staging
    - kubectl rollout status deployment/api -n staging
    - kubectl rollout status deployment/worker -n staging
    - kubectl rollout status deployment/gateway -n staging
  environment:
    name: staging
    url: https://staging.company.com
  dependencies:
    - package:frontend
    - package:api
    - package:worker
    - package:gateway
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy:production:
  image: bitnami/kubectl:latest
  stage: deploy
  script:
    - kubectl set image deployment/frontend frontend=$DOCKER_REGISTRY/frontend:$CI_COMMIT_SHA -n production
    - kubectl set image deployment/api api=$DOCKER_REGISTRY/api:$CI_COMMIT_SHA -n production
    - kubectl set image deployment/worker worker=$DOCKER_REGISTRY/worker:$CI_COMMIT_SHA -n production
    - kubectl set image deployment/gateway gateway=$DOCKER_REGISTRY/gateway:$CI_COMMIT_SHA -n production
    - kubectl rollout status deployment/frontend -n production
    - kubectl rollout status deployment/api -n production
    - kubectl rollout status deployment/worker -n production
    - kubectl rollout status deployment/gateway -n production
  environment:
    name: production
    url: https://app.company.com
  dependencies:
    - package:frontend
    - package:api
    - package:worker
    - package:gateway
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: manual