# BEFORE: Scenario 8 - Complex Nested Template Inheritance
# This shows deeply nested and confusing template inheritance that needs consolidation

stages:
  - validate
  - build
  - test
  - security
  - deploy

variables:
  DOCKER_REGISTRY: "registry.company.com"
  NODE_VERSION: "18"

# Base templates with redundant inheritance chains
.base_job:
  image: alpine:latest
  before_script:
    - apk add --no-cache git curl

.node_base:
  extends: .base_job
  image: node:18
  before_script:
    - apk add --no-cache git curl
    - node --version
    - npm --version

.build_base:
  extends: .node_base
  stage: build
  before_script:
    - apk add --no-cache git curl
    - node --version
    - npm --version
    - npm ci --cache .npm --prefer-offline
  cache:
    key: "$CI_COMMIT_REF_SLUG-npm"
    paths:
      - node_modules/
      - .npm/

.test_base:
  extends: .node_base
  stage: test
  before_script:
    - apk add --no-cache git curl
    - node --version
    - npm --version
    - npm ci --cache .npm --prefer-offline
  cache:
    key: "$CI_COMMIT_REF_SLUG-npm"
    paths:
      - node_modules/
      - .npm/

.lint_base:
  extends: .test_base
  before_script:
    - apk add --no-cache git curl
    - node --version
    - npm --version
    - npm ci --cache .npm --prefer-offline
    - echo "Preparing linting environment"

.security_base:
  extends: .test_base
  stage: security
  before_script:
    - apk add --no-cache git curl
    - node --version
    - npm --version
    - npm ci --cache .npm --prefer-offline
    - echo "Preparing security scan environment"

.docker_base:
  extends: .base_job
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - apk add --no-cache git curl
    - docker info

.deploy_base:
  extends: .docker_base
  stage: deploy
  before_script:
    - apk add --no-cache git curl
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $DOCKER_REGISTRY

# Jobs with confusing inheritance chains
validate:yaml:
  extends: .base_job
  stage: validate
  script:
    - apk add --no-cache yamllint
    - yamllint .gitlab-ci.yml
    - find . -name "*.yml" -o -name "*.yaml" | xargs yamllint

validate:dockerfile:
  extends: .docker_base
  stage: validate
  script:
    - docker run --rm -i hadolint/hadolint < Dockerfile

build:frontend:
  extends: .build_base
  script:
    - cd frontend/
    - npm run build:production
    - npm run optimize
  artifacts:
    paths:
      - frontend/dist/
    expire_in: 1 hour

build:backend:
  extends: .build_base
  script:
    - cd backend/
    - npm run build
    - npm run compile:production
  artifacts:
    paths:
      - backend/dist/
    expire_in: 1 hour

test:unit:frontend:
  extends: .test_base
  script:
    - cd frontend/
    - npm run test:unit -- --coverage
  coverage: '/Coverage: \d+\.\d+%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/cobertura-coverage.xml

test:unit:backend:
  extends: .test_base
  script:
    - cd backend/
    - npm run test:unit -- --coverage
  coverage: '/Coverage: \d+\.\d+%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: backend/coverage/cobertura-coverage.xml

test:integration:
  extends: .test_base
  services:
    - postgres:13
    - redis:6
  variables:
    POSTGRES_DB: testdb
    POSTGRES_USER: testuser
    POSTGRES_PASSWORD: testpass
    DATABASE_URL: "postgresql://testuser:testpass@postgres:5432/testdb"
    REDIS_URL: "redis://redis:6379"
  script:
    - npm run test:integration
  dependencies:
    - build:frontend
    - build:backend

lint:eslint:
  extends: .lint_base
  script:
    - npm run lint:js
    - npm run lint:ts

lint:stylelint:
  extends: .lint_base
  script:
    - npm run lint:css
    - npm run lint:scss

lint:prettier:
  extends: .lint_base
  script:
    - npm run format:check

security:npm-audit:
  extends: .security_base
  script:
    - npm audit --audit-level high
    - npm run security:check

security:dependency-check:
  extends: .security_base
  script:
    - npm install -g audit-ci
    - audit-ci --moderate

security:code-scan:
  extends: .security_base
  script:
    - npm install -g eslint-plugin-security
    - npm run lint:security

package:docker:
  extends: .deploy_base
  stage: deploy
  script:
    - docker build -t $DOCKER_REGISTRY/app:$CI_COMMIT_SHA .
    - docker push $DOCKER_REGISTRY/app:$CI_COMMIT_SHA
  dependencies:
    - build:frontend
    - build:backend

deploy:staging:
  extends: .deploy_base
  script:
    - apk add --no-cache curl kubectl
    - kubectl config use-context staging
    - kubectl set image deployment/app app=$DOCKER_REGISTRY/app:$CI_COMMIT_SHA -n staging
    - kubectl rollout status deployment/app -n staging
  environment:
    name: staging
    url: https://staging.company.com
  dependencies:
    - package:docker
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

deploy:production:
  extends: .deploy_base
  script:
    - apk add --no-cache curl kubectl
    - kubectl config use-context production
    - kubectl set image deployment/app app=$DOCKER_REGISTRY/app:$CI_COMMIT_SHA -n production
    - kubectl rollout status deployment/app -n production
  environment:
    name: production
    url: https://company.com
  dependencies:
    - package:docker
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
      when: manual