# AFTER: Multiple patterns consolidated using templates and defaults
stages:
  - build
  - test
  - security
  - package
  - deploy

variables:
  PYTHON_VERSION: "3.11"
  SECURITY_IMAGE: "security-scanner:latest"

# Default for Python jobs (consolidates most common pattern)
default:
  image: python:$PYTHON_VERSION
  before_script:
    - pip install --upgrade pip
    - pip install -r requirements.txt
    - pip install -r requirements-dev.txt
  cache:
    key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - .pip-cache/
      - __pycache__/

# Template for security jobs (handles second pattern)
.security_base:
  stage: security
  image: $SECURITY_IMAGE
  variables:
    OUTPUT_FORMAT: "json"
  before_script:
    - echo "Initializing security scanner..."
    - security-tool --version
  script:
    - security-tool scan --type $SCAN_TYPE --format $OUTPUT_FORMAT --output ${SCAN_TYPE}-results.json

# Template for Docker builds (handles third pattern)
.docker_build:
  stage: package
  image: docker:24.0
  services:
    - docker:24.0-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# Simplified Python jobs (inherit from default)
build:api:
  stage: build
  script:
    - python -m compileall src/
    - python setup.py build
  artifacts:
    paths:
      - build/
      - dist/

build:workers:
  stage: build
  script:
    - python -m compileall workers/
    - python setup.py build
  artifacts:
    paths:
      - build/
      - dist/

test:unit:
  stage: test
  script:
    - pytest tests/unit/ -v

test:integration:
  stage: test
  services:
    - postgres:15
    - redis:7
  script:
    - pytest tests/integration/ -v

# Simplified security jobs (inherit from template)
security:sast:
  extends: .security_base
  variables:
    SCAN_TYPE: "sast"
  artifacts:
    reports:
      sast: sast-results.json

security:dependency:
  extends: .security_base
  variables:
    SCAN_TYPE: "dependency"
  artifacts:
    reports:
      dependency_scanning: dependency-results.json

# Simplified Docker builds (inherit from template)
package:api:
  extends: .docker_build
  script:
    - docker buildx build --platform linux/amd64,linux/arm64 -t $CI_REGISTRY_IMAGE/api:$CI_COMMIT_SHA --push .
  dependencies:
    - build:api

package:workers:
  extends: .docker_build
  script:
    - docker buildx build --platform linux/amd64,linux/arm64 -t $CI_REGISTRY_IMAGE/workers:$CI_COMMIT_SHA --push -f Dockerfile.workers .
  dependencies:
    - build:workers

# Deploy job unchanged
deploy:staging:
  stage: deploy
  image: alpine:3.19
  script:
    - echo "Deploying to staging"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'