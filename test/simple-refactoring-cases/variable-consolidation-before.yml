# BEFORE: Scattered variables and hardcoded values across jobs
stages:
  - build
  - test
  - package
  - deploy

build:api:
  stage: build
  image: python:3.11
  variables:
    PYTHON_ENV: "production" 
    BUILD_TARGET: "api"
    PIP_CACHE_DIR: "/tmp/.pip-cache"
    API_BASE_URL: "https://api.company.com"
    API_VERSION: "v1"
  script:
    - echo "Building API with PYTHON_ENV=$PYTHON_ENV"
    - echo "API endpoint: $API_BASE_URL/$API_VERSION"
    - pip install --cache-dir $PIP_CACHE_DIR -r requirements.txt
    - python setup.py build

build:workers:
  stage: build
  image: python:3.11
  variables:
    PYTHON_ENV: "production"
    BUILD_TARGET: "workers"
    PIP_CACHE_DIR: "/tmp/.pip-cache"
    QUEUE_URL: "redis://redis.company.com:6379/0"
    WORKER_CONCURRENCY: "4"
  script:
    - echo "Building workers with PYTHON_ENV=$PYTHON_ENV"
    - echo "Queue: $QUEUE_URL, Concurrency: $WORKER_CONCURRENCY"
    - pip install --cache-dir $PIP_CACHE_DIR -r requirements.txt
    - python setup.py build

test:unit:
  stage: test
  image: python:3.11
  variables:
    PYTHON_ENV: "test"
    TEST_TYPE: "unit"
    PIP_CACHE_DIR: "/tmp/.pip-cache"
    API_BASE_URL: "https://api.company.com"
    API_VERSION: "v1"
    DATABASE_URL: "postgresql://test:test@localhost:5432/test_db"
  script:
    - echo "Running unit tests with PYTHON_ENV=$PYTHON_ENV"
    - echo "API endpoint: $API_BASE_URL/$API_VERSION"
    - pip install --cache-dir $PIP_CACHE_DIR -r requirements-dev.txt
    - pytest tests/unit/ -v

test:integration:
  stage: test
  image: python:3.11
  services:
    - postgres:15
    - redis:7
  variables:
    PYTHON_ENV: "test"
    TEST_TYPE: "integration"
    PIP_CACHE_DIR: "/tmp/.pip-cache"
    API_BASE_URL: "https://api.company.com"
    API_VERSION: "v1"
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/test_db"
    QUEUE_URL: "redis://redis:6379/1"
  script:
    - echo "Running integration tests with PYTHON_ENV=$PYTHON_ENV"
    - echo "API: $API_BASE_URL/$API_VERSION, Queue: $QUEUE_URL"
    - pip install --cache-dir $PIP_CACHE_DIR -r requirements-dev.txt
    - pytest tests/integration/ -v

package:docker:
  stage: package
  image: docker:24.0
  services:
    - docker:24.0-dind
  variables:
    DOCKER_REGISTRY: "registry.company.com"
    IMAGE_NAME: "myapp"
    DOCKER_BUILDKIT: "1"
  script:
    - echo "Building Docker image for $DOCKER_REGISTRY/$IMAGE_NAME"
    - docker buildx build -t $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA .
    - docker push $DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA

deploy:staging:
  stage: deploy
  image: alpine:3.19
  variables:
    PYTHON_ENV: "staging"
    DEPLOY_TARGET: "staging"
    API_BASE_URL: "https://staging-api.company.com"
    API_VERSION: "v1"
    DATABASE_URL: "postgresql://staging:$STAGING_PASSWORD@staging-db.company.com:5432/app_db"
    QUEUE_URL: "redis://staging-redis.company.com:6379/0"
  script:
    - echo "Deploying to staging with PYTHON_ENV=$PYTHON_ENV"
    - echo "API: $API_BASE_URL/$API_VERSION"
    - echo "Database: $DATABASE_URL"
    - kubectl set image deployment/api api=$DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA

deploy:production:
  stage: deploy
  image: alpine:3.19
  variables:
    PYTHON_ENV: "production"
    DEPLOY_TARGET: "production"
    API_BASE_URL: "https://api.company.com"
    API_VERSION: "v1"
    DATABASE_URL: "postgresql://prod:$PROD_PASSWORD@prod-db.company.com:5432/app_db"
    QUEUE_URL: "redis://redis.company.com:6379/0"
    DOCKER_REGISTRY: "registry.company.com"
    IMAGE_NAME: "myapp"
  script:
    - echo "Deploying to production with PYTHON_ENV=$PYTHON_ENV"
    - echo "API: $API_BASE_URL/$API_VERSION"
    - echo "Queue: $QUEUE_URL"
    - kubectl set image deployment/api api=$DOCKER_REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA
  when: manual