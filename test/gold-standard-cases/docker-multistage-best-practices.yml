# High-quality Docker-focused CI/CD pipeline with multi-stage builds and security scanning
# Features: Multi-stage builds, container scanning, registry management, security best practices

image: docker:24-alpine

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  # Use BuildKit for advanced build features
  DOCKER_BUILDKIT: "1"
  BUILDX_BUILDER: "multiarch"

# Cache Docker layers efficiently
cache:
  key: 
    files:
      - Dockerfile
      - package*.json
  paths:
    - .docker-cache/
  policy: pull-push

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

services:
  - docker:24-dind

stages:
  - validate
  - build
  - test
  - security
  - deploy

# Dockerfile linting and validation
dockerfile:lint:
  stage: validate
  image: hadolint/hadolint:latest-alpine
  script:
    - hadolint Dockerfile --format json > hadolint-report.json
  artifacts:
    reports:
      codequality: hadolint-report.json
    when: always
    expire_in: 1 week

# Multi-architecture build with caching
build:
  stage: build
  before_script:
    - docker info
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    # Set up buildx for multi-arch builds
    - docker buildx create --use --name $BUILDX_BUILDER --driver docker-container
    - docker buildx inspect --bootstrap
  script:
    # Build multi-stage image with cache
    - |
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --cache-from $CI_REGISTRY_IMAGE:cache \
        --cache-to $CI_REGISTRY_IMAGE:cache \
        --target production \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG \
        --push \
        .
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour

# Container structure tests
test:structure:
  stage: test
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker pull $IMAGE_TAG
  script:
    # Install container-structure-test
    - wget -O container-structure-test https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
    - chmod +x container-structure-test
    # Run structure tests
    - ./container-structure-test test --image $IMAGE_TAG --config container-structure-test.yaml
  artifacts:
    reports:
      junit: structure-test-results.xml
    when: always
    expire_in: 1 week
  dependencies:
    - build

# Runtime security testing
test:runtime:
  stage: test
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker pull $IMAGE_TAG
  script:
    # Test container runs properly
    - docker run --rm -d --name test-container -p 8080:8080 $IMAGE_TAG
    - sleep 10
    # Health check
    - docker exec test-container wget --spider --quiet http://localhost:8080/health || exit 1
    # Cleanup
    - docker stop test-container
  dependencies:
    - build

# Container security scanning with Trivy
security:scan:
  stage: security
  image: aquasec/trivy:latest
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Scan for vulnerabilities
    - trivy image --format template --template "@contrib/sarif.tpl" -o trivy-report.sarif $IMAGE_TAG
    - trivy image --format json -o trivy-report.json $IMAGE_TAG
    # Fail on HIGH and CRITICAL vulnerabilities
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_TAG
  artifacts:
    reports:
      sast: trivy-report.sarif
    paths:
      - trivy-report.json
    when: always
    expire_in: 1 week
  dependencies:
    - build
  allow_failure: true

# Container benchmarking
security:benchmark:
  stage: security
  image: docker:24-alpine
  variables:
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker pull $IMAGE_TAG
    # Install docker-bench-security
    - apk add --no-cache git
    - git clone https://github.com/docker/docker-bench-security.git
  script:
    - cd docker-bench-security
    - sh docker-bench-security.sh -c container_runtime -i $IMAGE_TAG
  artifacts:
    reports:
      junit: docker-bench-results.xml
    when: always
    expire_in: 1 week
  dependencies:
    - build
  allow_failure: true

# Tag and promote images
promote:latest:
  stage: deploy
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Pull the built image
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    # Tag as latest
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:latest
    # Tag with version if it's a tag
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
        docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG
  dependencies:
    - build

# Deploy to production using Docker Compose
deploy:production:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache docker-compose curl
  script:
    - echo "Deploying $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA to production"
    # Update docker-compose.yml with new image tag
    - sed -i "s|IMAGE_TAG|$CI_COMMIT_SHA|g" docker-compose.prod.yml
    # Deploy via webhook or direct SSH
    - curl -X POST "$PRODUCTION_WEBHOOK_URL" 
      -H "Authorization: Bearer $PRODUCTION_TOKEN"
      -H "Content-Type: application/json"
      -d "{\"image_tag\":\"$CI_COMMIT_SHA\"}"
  environment:
    name: production
    url: https://app.example.com
  rules:
    - if: $CI_COMMIT_TAG
  dependencies:
    - build
    - security:scan