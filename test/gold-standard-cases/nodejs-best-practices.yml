# High-quality Node.js CI/CD pipeline with comprehensive testing and modern practices
# Features: Matrix testing, proper caching, security scanning, semantic releases

image: node:18-alpine

variables:
  NODE_ENV: "test"
  POSTGRES_USER: "postgres"
  POSTGRES_DB: "test_db"
  # Use GitLab's built-in postgres service which doesn't require password

# Efficient dependency caching
cache:
  key:
    files:
      - package-lock.json
  paths:
    - node_modules/
    - .npm/
  policy: pull-push

# Default setup for all jobs
default:
  before_script:
    - npm ci --cache .npm --prefer-offline

# Proper workflow rules for performance
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

stages:
  - lint
  - test
  - build
  - security
  - deploy

# Code quality checks
lint:
  stage: lint
  script:
    - npm run lint
    - npm run format:check
  artifacts:
    reports:
      junit: junit.xml
    when: always
    expire_in: 1 week

# Matrix testing across Node versions
test:
  stage: test
  parallel:
    matrix:
      - NODE_VERSION: ["16", "18", "20"]
  image: node:${NODE_VERSION}-alpine
  services:
    - postgres:13-alpine
  variables:
    DATABASE_URL: "postgresql://postgres@postgres:5432/test_db"
  script:
    - npm run test:unit
    - npm run test:integration
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
      junit: junit.xml
    paths:
      - coverage/
    expire_in: 30 days

# Build and package
build:
  stage: build
  script:
    - npm run build
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  needs:
    - lint
    - test
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Security scanning
security:audit:
  stage: security
  script:
    - npm audit --audit-level high
  allow_failure: true

security:snyk:
  stage: security
  image: snyk/snyk:node
  script:
    - snyk test --severity-threshold=high
  artifacts:
    reports:
      sast: snyk-report.json
    when: always
    expire_in: 1 week
  allow_failure: true

# Semantic release for automatic versioning
release:
  stage: deploy
  image: node:18-alpine
  script:
    - npx semantic-release
  needs:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# Container build and push
docker:build:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
        docker push $CI_REGISTRY_IMAGE:latest
      fi
  needs:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG