# High-quality GitLab CI/CD pipeline for Go projects
# Based on GitLab's official template with enhanced best practices
# This should produce minimal or no analyzer warnings when tested

image: golang:1.21-alpine

variables:
  GO_VERSION: "1.21"
  CGO_ENABLED: "0"
  GOOS: linux
  GOARCH: amd64
  # Use project-specific cache paths
  GOPATH: $CI_PROJECT_DIR/.go
  GOCACHE: $CI_PROJECT_DIR/.cache/go-build
  GOLANGCI_LINT_CACHE: $CI_PROJECT_DIR/.cache/golangci-lint

# Efficient caching strategy
cache:
  key: 
    files:
      - go.mod
      - go.sum
  paths:
    - .go/pkg/mod/
    - .cache/
  policy: pull-push

# Use workflow rules instead of individual job rules for better performance  
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - prepare
  - quality
  - test
  - build
  - security

# Preparation stage
prepare:
  stage: prepare
  before_script:
    - apk add --no-cache git make
    - mkdir -p $GOPATH $GOCACHE $GOLANGCI_LINT_CACHE
  script:
    - go mod download
    - go mod verify
  cache:
    key: 
      files:
        - go.mod
        - go.sum
    paths:
      - .go/pkg/mod/
    policy: push
  only:
    changes:
      - go.mod
      - go.sum
      - "**/*.go"

# Code quality checks
format-check:
  stage: quality
  script:
    - test -z "$(gofmt -l .)"

vet:
  stage: quality
  script:
    - go vet ./...

lint:
  stage: quality
  image: golangci/golangci-lint:v1.54-alpine
  script:
    - golangci-lint run --timeout 5m
  artifacts:
    reports:
      junit: golangci-lint-report.xml
    when: always
    expire_in: 1 week

# Testing with coverage
test:
  stage: test
  script:
    - go test -race -coverprofile=coverage.out -covermode=atomic ./...
    - go tool cover -html=coverage.out -o coverage.html
  coverage: '/coverage: \d+.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
    paths:
      - coverage.html
      - coverage.out
    expire_in: 30 days

# Benchmarking (optional, only on main branch)
benchmark:
  stage: test
  script:
    - go test -bench=. -benchmem ./...
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: true

# Build artifacts
build:
  stage: build
  script:
    - mkdir -p dist/
    - go build -ldflags="-w -s" -o dist/myapp ./cmd/myapp
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Security scanning
gosec:
  stage: security
  image: securecodewarrior/gosec:v2.18.2
  script:
    - gosec -fmt junit-xml -out gosec-report.xml ./...
  artifacts:
    reports:
      junit: gosec-report.xml
    when: always
    expire_in: 1 week
  allow_failure: true

# Dependency scanning  
dependency_scanning:
  stage: security
  variables:
    DS_GOLANG_VERSION: $GO_VERSION
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH