# High-quality Python/Django CI/CD pipeline with comprehensive testing and security
# Features: Matrix testing, dependency caching, security scanning, database migrations

image: python:3.11-slim

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_USER: "postgres"
  POSTGRES_DB: "test_db"
  DJANGO_SETTINGS_MODULE: "myproject.settings.test"

# Smart caching for Python dependencies
cache:
  key:
    files:
      - requirements.txt
      - requirements-dev.txt
  paths:
    - .cache/pip
    - venv/
  policy: pull-push

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

stages:
  - prepare
  - quality
  - test
  - security
  - deploy

# Dependency installation
dependencies:
  stage: prepare
  before_script:
    - python -V
    - pip install --upgrade pip
    - python -m venv venv
    - source venv/bin/activate
  script:
    - pip install -r requirements-dev.txt
  artifacts:
    paths:
      - venv/
    expire_in: 1 hour
  cache:
    key:
      files:
        - requirements.txt
        - requirements-dev.txt
    paths:
      - .cache/pip
    policy: push

# Code quality checks
code-quality:
  stage: quality
  before_script:
    - source venv/bin/activate
  script:
    - black --check .
    - isort --check-only .
    - flake8 .
    - mypy .
    - bandit -r . -f json -o bandit-report.json
  dependencies:
    - dependencies
  artifacts:
    reports:
      sast: bandit-report.json
    when: always
    expire_in: 1 week

# Matrix testing across Python versions
test:
  stage: test
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.9", "3.10", "3.11"]
  image: python:${PYTHON_VERSION}-slim
  services:
    - postgres:13-alpine
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/test_db"
  before_script:
    - apt-get update -qq && apt-get install -y -qq git
    - pip install --upgrade pip
    - pip install -r requirements-dev.txt
  script:
    - python manage.py collectstatic --noinput
    - python manage.py migrate
    - coverage run --source='.' manage.py test
    - coverage report --show-missing
    - coverage xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml
    paths:
      - htmlcov/
    expire_in: 30 days

# Security scanning
security:safety:
  stage: security
  before_script:
    - source venv/bin/activate
  script:
    - safety check --json --output safety-report.json
  dependencies:
    - dependencies
  artifacts:
    reports:
      sast: safety-report.json
    when: always
    expire_in: 1 week
  allow_failure: true

security:semgrep:
  stage: security
  image: returntocorp/semgrep:latest
  script:
    - semgrep --config=auto --json --output=semgrep-report.json .
  artifacts:
    reports:
      sast: semgrep-report.json
    when: always
    expire_in: 1 week
  allow_failure: true

# Database migration check
migrations:
  stage: test
  services:
    - postgres:13-alpine
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/test_db"
  before_script:
    - source venv/bin/activate
  script:
    - python manage.py makemigrations --check --dry-run
    - python manage.py migrate
    - python manage.py check
  dependencies:
    - dependencies

# Build Docker image
docker:build:
  stage: deploy
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - |
      if [ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]; then
        docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
        docker push $CI_REGISTRY_IMAGE:latest
      fi
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Deploy to staging
deploy:staging:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache curl
  script:
    - echo "Deploying to staging environment"
    - curl -X POST "$STAGING_WEBHOOK_URL" -H "Authorization: Bearer $STAGING_TOKEN"
  environment:
    name: staging
    url: https://staging.example.com
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH