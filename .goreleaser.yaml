version: 2

before:
  hooks:
    - go mod tidy
    - go generate ./...

builds:
  - id: gitlab-smith
    main: ./cmd/gitlab-smith
    binary: gitlab-smith
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
    goarch:
      - amd64
      - arm64
    ldflags:
      - -s -w
      - -X main.version={{.Version}}
      - -X main.commit={{.Commit}}
      - -X main.date={{.Date}}
      - -X main.builtBy=goreleaser
    mod_timestamp: '{{ .CommitTimestamp }}'

archives:
  - id: gitlab-smith
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    format: tar.gz
    format_overrides:
      - goos: windows
        format: zip
    files:
      - README.md
      - LICENSE
      - CLAUDE.md

checksum:
  name_template: 'checksums.txt'
  algorithm: sha256

signs:
  - artifacts: checksum
    args:
      - "--batch"
      - "--local-user"
      - "{{ .Env.GPG_FINGERPRINT }}"
      - "--output"
      - "${signature}"
      - "--detach-sign"
      - "${artifact}"
    cmd: gpg
    env:
      - GPG_TTY=/dev/tty

snapshot:
  name_template: "{{ incpatch .Version }}-next"

changelog:
  sort: asc
  use: github
  groups:
    - title: "New Features"
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "Bug Fixes"
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "Performance Improvements"
      regexp: '^.*?perf(\([[:word:]]+\))??!?:.+$'
      order: 2
    - title: "Documentation"
      regexp: '^.*?docs?(\([[:word:]]+\))??!?:.+$'
      order: 3
    - title: "Testing"
      regexp: '^.*?test(\([[:word:]]+\))??!?:.+$'
      order: 4
    - title: "Refactoring"
      regexp: '^.*?refactor(\([[:word:]]+\))??!?:.+$'
      order: 5
    - title: "Build & CI"
      regexp: '^.*?(build|ci)(\([[:word:]]+\))??!?:.+$'
      order: 6
    - title: "Other Changes"
      order: 999
  filters:
    exclude:
      - '^chore:'
      - '^style:'
      - '^Merge'

release:
  github:
    owner: "{{ .Env.GITHUB_REPOSITORY_OWNER }}"
    name: "{{ .ProjectName }}"
  
  header: |
    ## GitLabSmith {{ .Tag }}
    
    GitLab CI/CD configuration refactoring and validation tool.
    
    ### Installation
    
    #### Homebrew (macOS/Linux)
    ```bash
    brew tap {{ .Env.GITHUB_REPOSITORY_OWNER }}/gitlab-smith
    brew install gitlab-smith
    ```
    
    #### Download Binary
    Download the appropriate binary for your platform from the assets below.
    
    #### Docker
    ```bash
    docker pull ghcr.io/{{ .Env.GITHUB_REPOSITORY }}/gitlab-smith:{{ .Tag }}
    ```
  
  footer: |
    ### Verifying Signatures
    
    All release artifacts are signed with GPG. To verify:
    ```bash
    gpg --verify checksums.txt.sig checksums.txt
    sha256sum --check checksums.txt
    ```
    
    **Full Changelog**: https://github.com/{{ .Env.GITHUB_REPOSITORY }}/compare/{{ .PreviousTag }}...{{ .Tag }}

  name_template: "{{ .Tag }}"
  
  draft: false
  prerelease: auto
  
  mode: append

brews:
  - repository:
      owner: "{{ .Env.GITHUB_REPOSITORY_OWNER }}"
      name: homebrew-tap
      token: "{{ .Env.HOMEBREW_TAP_GITHUB_TOKEN }}"
    
    folder: Formula
    
    homepage: "https://github.com/{{ .Env.GITHUB_REPOSITORY }}"
    description: "GitLab CI/CD configuration refactoring and validation tool"
    license: "MIT"
    
    dependencies:
      - name: git
        type: optional
    
    test: |
      system "#{bin}/gitlab-smith", "version"
    
    install: |
      bin.install "gitlab-smith"

dockers:
  - id: gitlab-smith
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:{{ .Tag }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}.{{ .Minor }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:latest-amd64"
    use: buildx
    build_flag_templates:
      - "--platform=linux/amd64"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--label=org.opencontainers.image.source={{.GitURL}}"
    goos: linux
    goarch: amd64
    dockerfile: Dockerfile

  - id: gitlab-smith-arm64
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:{{ .Tag }}-arm64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}-arm64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}.{{ .Minor }}-arm64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:latest-arm64"
    use: buildx
    build_flag_templates:
      - "--platform=linux/arm64"
      - "--label=org.opencontainers.image.created={{.Date}}"
      - "--label=org.opencontainers.image.title={{.ProjectName}}"
      - "--label=org.opencontainers.image.revision={{.FullCommit}}"
      - "--label=org.opencontainers.image.version={{.Version}}"
      - "--label=org.opencontainers.image.source={{.GitURL}}"
    goos: linux
    goarch: arm64
    dockerfile: Dockerfile

docker_manifests:
  - name_template: "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:{{ .Tag }}"
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:{{ .Tag }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:{{ .Tag }}-arm64"
  
  - name_template: "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}"
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}-arm64"
  
  - name_template: "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}.{{ .Minor }}"
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}.{{ .Minor }}-amd64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:v{{ .Major }}.{{ .Minor }}-arm64"
  
  - name_template: "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:latest"
    image_templates:
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:latest-amd64"
      - "ghcr.io/{{ .Env.GITHUB_REPOSITORY }}:latest-arm64"